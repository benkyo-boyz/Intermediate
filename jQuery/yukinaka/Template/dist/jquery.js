(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

(function () {

  var $ = function $(selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');
  $.each = require('./each');

  var Core = function Core(selector, context) {
    context = context || document;
    var elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  },
      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  Core.prototype = {
    trim: function trim(text) {
      if (text === null) {
        text = '';
      } else {
        (text + '').replace(rtrim, '');
      }
      return text;
    },
    addClass: function addClass(className) {
      var className = this.trim(className);
      for (var i = 0; i < this.length; i++) {

        var classArray = this[i].className.split(' ');
        classArray.push(className);

        this[i].className = classArray.join('');
      }
      return this;
    },

    css: function css() {},

    each: function each(callback) {
      var i = 0,
          l = this.length;
      for (; i < l; i++) {
        callback.call(this, this[i], i);
      }
    },

    get: function get(index) {
      var ret = [],
          l = this.length;
      for (var i = 0; i < l; i++) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },

    splice: Array.prototype.splice

  };

  window.$ = $;

  require('./test');

  $('body').addClass('hoge');
})();

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
