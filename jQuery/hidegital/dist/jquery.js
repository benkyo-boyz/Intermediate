(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

(function () {

  //contextの中からselectorを探すよ contextはdom
  var $ = function $(selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');
  $.each = require('./each');

  var Core = function Core(selector, context) {
    context = context || document; //contextがなかったらdocumentが入る
    var elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    //Arraylikeオブジェクト オブジェクトなのに配列のようにpush、参照などをするやり方

    this.context = context;
    this.selector = selector;
    return this;
    //core　
  };

  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  Core.prototype = {

    each: function each(callback) {
      var i = 0,
          l = this.length;
      for (; i < l; i++) {
        callback.call(this, this[i], i);
      }
    },

    get: function get(index) {
      var ret = [],
          l = this.length;
      for (var i = 0; i < l; i++) {
        //数字の時のみオリジナルのdomを取得するため
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },

    //text: function(e) {
    //  var t = "";
    //  for ( var j = 0; j < e.length; j++ ) {
    //    var r = e[j].childNodes;
    //    for ( var i = 0; i < r.length; i++ )
    //      //t += r[i].nodeType != 1 ?
    //      //    r[i].nodeValue : jQuery.fn.text([ r[i] ]);
    //      console.log(r);
    //  }
    //  return t;
    //},

    trim: function trim(text) {
      var rtext;
      rtext = '';
      if (text !== null) {
        rtext = (text + '').replace(rtrim, '');
      }
      return rtext;
    },
    addClass: function addClass(v) {
      var cName, classArr, i;
      v = this.trim(v);
      for (var k = 0; k < this.length; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(v) > -1) {
          continue;
        }
        if (classArr[0] === '') {
          classArr[0] = v;
        } else {
          classArr.push(v);
        }
        /*class追加処理*/
        if (classArr.length === 1) {
          i.className = classArr[0];
        } else {
          i.className = classArr.join(' ');
        }
        //console.log(classArr);
      }
      return this;
    },

    removeClass: function removeClass(v) {
      var cName, classArr, clearArr, k, i, m, j;
      v = this.trim(v);
      //console.log(v);
      for (k = 0; k < this.length; k++) {
        i = this[k];
        console.log(i);
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(v) === -1) {
          continue;
        }

        clearArr = [];
        for (j = 0; j < classArr.length; j++) {
          m = classArr[j];
          if (m !== v && m !== '') {
            clearArr.push(m);
          }
        }
        i.className = clearArr.join(' ');
      }

      return this;
    },

    splice: Array.prototype.splice

  };

  window.$ = $;

  require('./test');
})();

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

//$('div').addClass('zaaazazaza');
$('div').removeClass('cccc ');

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
