(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

(function () {

  var $ = function $(selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');
  $.each = require('./each');

  var Core = function Core(selector, context) {
    context = context || document;
    var elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  Core.prototype = {

    css: function css() {},

    each: function each(callback) {
      var i = 0,
          l = this.length;
      for (; i < l; i++) {
        callback.apply(this, [this[i], i]);
      }
    },

    get: function get(index) {
      var ret = [],
          l = this.length;
      for (var i = 0; i < l; i++) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },

    addClass: function addClass(name) {
      this.each(function (elem, i) {
        elem.classList.add(name);
      });
      return this; //thisを返すことでメソッドチェーンを可能とする
    },

    removeClass: function removeClass(name) {
      this.each(function (elem, i) {
        elem.classList.remove(name);
      });
      return this;
    },

    toggleClass: function toggleClass(name) {
      this.each(function (elem, i) {
        var hasClass = elem.className;
        if (hasClass.indexOf(name) === -1) {
          elem.classList.add(name);
        } else {
          elem.classList.remove(name);
        }
      });
      return this;
    },

    click: function click(event) {
      this[0].addEventListener('click', event);
      return this;
    },

    hide: function hide() {
      this.each(function (elem, i) {
        elem.style.display = 'none';
      });
      return this;
    },

    show: function show() {
      this.each(function (elem, i) {
        elem.style.display = 'block';
      });
      return this;
    },

    toggle: function toggle() {
      this.each(function (elem, i) {
        var state = elem.style.display;
        if (!state || state === 'block') {
          elem.style.display = 'none';
        } else {
          elem.style.display = 'block';
        }
      });
      return this;
    },

    fadeOut: function fadeOut(time) {
      console.log(time);
      this[0].style.display = 'none';
      return this;
    },

    fadeIn: function fadeIn(time) {
      console.log(time);
      this[0].style.display = 'block';
      return this;
    },

    val: function val(text) {
      if (text) {
        this[0].value = text;
      } else {
        return this[0].value;
      }
    },

    child: function child(target) {
      console.log('child');
    },

    splice: Array.prototype.splice

  };

  window.$ = $;

  require('./test');
})();

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));

$('div').each(function (e, i) {
  console.log(e);
});

$('body').addClass('piyo');
$('body').removeClass('fuga');
$('.hideBtn').click(function () {
  $('div').hide().addClass('disable');
});
$('.showBtn').click(function () {
  $('div').show().removeClass('disable');
});
$('.toggleBtn').click(function () {
  $('div').toggle().toggleClass('disable');
});
$('.fadeInBtn').click(function () {
  $('.display').fadeIn(500).addClass('disable');
});
$('.fadeOutBtn').click(function () {
  $('.display').fadeOut(500).removeClass('disable');
});
$('.notice').click(function () {
  var val = '.' + $('.noticeTarget').val();
  $(val).addClass('active');
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
