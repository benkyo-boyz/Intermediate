(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
'use strict';

(function () {
  var $, Core, rtrim;

  $ = function (selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');

  $.each = require('./each');

  Core = function (selector, context) {
    var elems;
    context = context || document;
    elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  Core.prototype = {
    trim: function trim(text) {
      var rtext;
      rtext = '';
      if (text !== null) {
        rtext = (text + '').replace(rtrim, '');
      }
      return rtext;
    },
    addClass: function addClass(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) > -1) {
          continue;
        }
        if (classArr[0] === '') {
          classArr[0] = value;
        } else {
          classArr.push(value);
        }
        i.className = classArr.length === 1 ? classArr[0] : classArr.join(' ');
      }
      console.log(this.get(0).className);
      return this;
    },
    removeClass: function removeClass(value) {
      var cName, classArr, i, j, k, len, len1, m, needClassArr;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) === -1) {
          continue;
        }
        needClassArr = [];
        for (m = 0, len1 = classArr.length; m < len1; m++) {
          j = classArr[m];
          if (j !== value && j !== '') {
            needClassArr.push(j);
          }
        }
        i.className = needClassArr.join(' ');
      }
      return this;
    },
    toggleClass: function toggleClass(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) === -1) {
          this.addClass(value);
        } else {
          this.removeClass(value);
        }
      }
      return this;
    },
    hasClass: function hasClass(value) {
      var classArr, flag, i, k, len;
      value = this.trim(value);
      flag = false;
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        classArr = i.className.split(' ');
        if (classArr.indexOf(value) > -1) {
          flag = true;
          break;
        }
      }
      return flag;
    },
    each: function each(callback) {
      var i, k, l, ref;
      i = 0;
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        callback.call(this, this[i], i);
      }
    },
    get: function get(index) {
      var i, k, l, ref, ret;
      ret = [];
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },
    splice: Array.prototype.splice
  };

  window.$ = $;

  require('./test');

  return;
}).call(undefined);

//# sourceMappingURL=jquery.js.map

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

$('#e').removeClass('hoge');

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
