(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
'use strict';

(function () {
  var $, Core;

  $ = function (selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');

  $.each = require('./each');

  Core = function (selector, context) {
    var elems;
    context = context || document;
    elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  Core.prototype = {
    addClass: function addClass(cName) {
      var arr, i, j, len, results;
      results = [];
      for (j = 0, len = this.length; j < len; j++) {
        i = this[j];
        arr = i.className.split(' ');
        if (arr.indexOf(cName) > -1) {
          continue;
        }
        if (arr[0] === '') {
          arr[0] = cName;
        } else {
          arr.push(cName);
        }
        results.push(i.className = arr.length === 1 ? arr[0] : arr.join(' '));
      }
      return results;
    },
    removeClass: function removeClass(cName) {
      var arr, c, classArray, i, j, k, len, len1, results;
      results = [];
      for (j = 0, len = this.length; j < len; j++) {
        i = this[j];
        arr = i.className.split(' ');
        if (arr.indexOf(cName) === -1) {
          continue;
        }
        classArray = [];
        for (k = 0, len1 = arr.length; k < len1; k++) {
          c = arr[k];
          if (c !== cName && c !== '') {
            classArray.push(c);
          }
        }
        results.push(i.className = classArray.join(' '));
      }
      return results;
    },
    hasClass: function hasClass(cName) {
      var arr, i, j, len;
      for (j = 0, len = this.length; j < len; j++) {
        i = this[j];
        arr = i.className.split(' ');
        if (arr.indexOf(cName) > -1) {
          return true;
        }
      }
      return false;
    },
    each: function each(callback) {
      var i, j, l, ref;
      i = 0;
      l = this.length;
      for (i = j = 0, ref = l; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        callback.call(this, this[i], i);
      }
    },
    get: function get(index) {
      var i, j, l, ref, ret;
      ret = [];
      l = this.length;
      for (i = j = 0, ref = l; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },
    splice: Array.prototype.splice
  };

  window.$ = $;

  require('./test');

  return;
}).call(undefined);

//# sourceMappingURL=jquery.js.map

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

$('#e').removeClass('hoge');

$("div").addClass(" ccc");

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
