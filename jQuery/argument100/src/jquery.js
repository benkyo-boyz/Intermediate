// Generated by CoffeeScript 1.9.3
(function() {
  var $, Core, rtrim;

  $ = function(selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');

  $.each = require('./each');

  Core = function(selector, context) {
    var elems;
    context = context || document;
    elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  Core.prototype = {
    trim: function(text) {
      var rtext;
      rtext = "";
      if (text !== null) {
        rtext = (text + "").replace(rtrim, "");
      }
      return rtext;
    },
    addClass: function(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(" ");
        if (classArr.indexOf(value) > -1) {
          continue;
        }
        if (classArr[0] === "") {
          classArr[0] = value;
        } else {
          classArr.push(value);
        }
        i.className = classArr.length === 1 ? classArr[0] : classArr.join(" ");
      }
      console.log(this.get(0).className);
      return this;
    },
    removeClass: function(value) {
      var cName, classArr, i, j, k, len, len1, m, needClassArr;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(" ");
        if (classArr.indexOf(value) === -1) {
          continue;
        }
        needClassArr = [];
        for (m = 0, len1 = classArr.length; m < len1; m++) {
          j = classArr[m];
          if (j !== value && j !== "") {
            needClassArr.push(j);
          }
        }
        i.className = needClassArr.join(" ");
      }
      return this;
    },
    toggleClass: function(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(" ");
        if (classArr.indexOf(value) === -1) {
          this.addClass(value);
        } else {
          this.removeClass(value);
        }
      }
      return this;
    },
    hasClass: function(value) {
      var classArr, flag, i, k, len;
      value = this.trim(value);
      flag = false;
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        classArr = i.className.split(" ");
        if (classArr.indexOf(value) > -1) {
          flag = true;
          break;
        }
      }
      return flag;
    },
    each: function(callback) {
      var i, k, l, ref;
      i = 0;
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        callback.call(this, this[i], i);
      }
    },
    get: function(index) {
      var i, k, l, ref, ret;
      ret = [];
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },
    splice: Array.prototype.splice
  };

  window.$ = $;

  require('./test');

  return;

}).call(this);

//# sourceMappingURL=jquery.js.map
